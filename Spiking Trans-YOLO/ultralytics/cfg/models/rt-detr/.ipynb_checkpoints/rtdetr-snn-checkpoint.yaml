# Ultralytics YOLO 🚀, AGPL-3.0 license
# YOLOv8 object detection model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 80  # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n-cls.yaml' will call yolov8-cls.yaml with scale 'n'
  # [depth, width, max_channels]
  l: [1.00, 1.00, 1024]

# #0.623
backbone:
  -  [-1, 1, MS_GetT, [3,1]]  #仅用于增加T               #0 [1,3,640,640]->[1,1,3,640,640]
  -  [-1, 1, MS_DownSampling, [128, 7, 4, 2, True]]     #1 [1,1,3,640,640]->[1,1,64,160,160]
  -  [-1, 3, MS_AllConvBlock, [4,7]]                        #2 [1,1,64,160,160]->[1,1,64,160,160]
  -  [-1, 1, MS_DownSampling, [256, 3, 2, 1, False]]   #3 [1,1,64,160,160]->[1,1,128,80,80]
  -  [-1, 6, MS_AllConvBlock, [4,7]]                        #4 [1,1,128,80,80]->[1,1,128,80,80]
  -  [-1, 1, MS_DownSampling, [512, 3, 2, 1, False]]   #5 [1,1,128,80,80]->[1,1,256,40,40]
  -  [-1, 9, MS_ConvBlock, [3,7]]                         #6 [1,1,256,40,40]->[1,1,256,40,40]
  -  [-1, 1, MS_DownSampling, [1024, 3, 2, 1, False]]  #7 [1,1,256,40,40]->[1,1,512,20,20]
  -  [-1, 3, MS_ConvBlock, [2,7]]                         #8 [1,1,512,20,20]->[1,1,512,20,20]
  -  [-1, 1, SpikeSPPF, [1024, 5]]                        #9 [1,512,20,20]->[1,512,20,20]

head:
  - [-1, 1, MS_StandardConv, [256,1,1]]  # 10
  - [-1, 1, MS_AIFI, [1024, 8]]
  - [-1, 1, MS_StandardConv, [256, 1, 1]]   # 12, Y5, lateral_convs.0

  - [-1, 1, nn.Upsample, [None, '(1,2,2)', 'nearest']]
  - [6, 1, MS_StandardConv, [256, 1, 1]]  # 14 input_proj.1
  - [[-2, -1], 1, Concat, [2]]
  - [-1, 3, MS_ConvBlock, [3,7]]
  - [-1, 1, MS_StandardConv, [256, 1, 1]]   # 17, Y4, lateral_convs.1

  - [-1, 1, nn.Upsample, [None, '(1,2,2)', 'nearest']]
  - [3, 1, MS_StandardConv, [256, 1, 1]]  # 19 input_proj.0
  - [[-2, -1], 1, Concat, [2]]  # cat backbone P4
  - [-1, 3, MS_ConvBlock, [3,7]]    # X3 (21), fpn_blocks.1

  - [-1, 1, MS_StandardConv, [256, 3, 2]]   # 22, downsample_convs.0
  - [[-1, 17], 1, Concat, [2]]  # cat Y4
  - [-1, 3, MS_ConvBlock, [3,7]]   # F4 (24), pan_blocks.0

  - [-1, 1, MS_StandardConv, [256, 3, 2]]   # 25, downsample_convs.1
  - [[-1, 12], 1, Concat, [2]]  # cat Y5
  - [-1, 3, MS_ConvBlock, [3,7]]     # F5 (27), pan_blocks.1

  - [[21, 24, 27], 1, SpikeRTDETRDecoder, [nc]]  # Detect(P3, P4, P5)


#head:
#  - [-1, 1, MS_StandardConv, [512,1,1]]                   #10 [1,1,512,20,20]->[1,1,256,20,20]  #
#  -  [-1, 1, nn.Upsample, [None, '(1,2,2)', 'nearest']]   #11 [1,1,256,20,20]->[1,1,256,40,40]
#  -  [ -1, 1, MS_ConvBlock, [3,7]]                          #12 [1,1,256,40,40]->[1,1,256,40,40]
#  -  [[-1, 6], 1, Concat, [2]]  # cat backbone P4         #13 [1,1,256,40,40]+[1,1,256,40,40] == [1,1,512,40,40]  #二者均受wider系数操控
#  
#  -  [-1, 1, MS_StandardConv, [256,1,1]]                  #14 [1,1,512,40,40]->[1,1,128,40,40]
#  -  [-1, 1, nn.Upsample, [None, '(1,2,2)', 'nearest']]   #15 [1,1,128,40,40]->[1,1,128,80,80]
#  -  [-1, 1, MS_AllConvBlock, [4,7]]                   #15.5 [1,1,128,40,40]->[1,1,128,40,40]
#
#  -  [[-1, 4], 1, Concat, [2]]  # cat backbone P3         #16 [1,1,128,80,80]+[1,1,128,80,80] == [1,1,256,80,80]
#  -  [-1, 1, MS_StandardConv, [256,1,1]]                  #17 [1,1,256,80,80]->[1,1,128,80,80]
#  -  [-1, 1, MS_AllConvBlock, [4,7]]                           #18 [1,1,128,80,80]->[1,1,128,80,80]   输出层
#
#  -  [-1, 1, MS_StandardConv, [256,3,2]]                  #19 [1,1,128,80,80]->[1,1,128,40,40]
#  -  [[-1, 14], 1, Concat, [2]]  # cat head P4            #20  [1,1,128,40,40]+[1,1,128,40,40] == [1,1,256,40,40]
#  -  [-1, 1, MS_ConvBlock, [3,7]]                           #21 [1,1,256,40,40]->[1,1,256,40,40]     输出层
#
#  -  [-1, 1, MS_StandardConv, [512,3,2]]                  #22 [1,1,256,40,40]->[1,1,256,20,20]
#  -  [[-1, 10], 1, Concat, [2]]  # cat head P5             #23 [1,1,256,20,20]+[1,1,256,20,20] == [1,1,512,20,20]
#  -  [-1, 1, MS_ConvBlock, [1,7]]   # 23 (P5/32-large)      #24 [1,1,512,20,20]->[1,1,512,20,20]  输出层             #C3层实际输出通道数为args[0]*缩放系数
#
#  -  [[19, 22, 25], 1, SpikeRTDETRDecoder, [nc]]             #25 [1,1,128,80,80] and [1,1,256,40,40] and [1,1,512,20,20]->
#                                                    #[1,3,80,80,144] and [1,3,40,40,144] and [1,3,20,20,144]   # Detect(P3, P4, P5)
